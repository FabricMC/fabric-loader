apply plugin: "fabric-loom"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

loom {
	runConfigs.configureEach {
		ideConfigGenerated = true
	}
}

def minecraft_version = "1.19.3";

repositories {
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${minecraft_version}+build.3:v2"

	implementation project(":minecraft")
	implementation project(":minecraft").sourceSets.main.output
	implementation project(":").sourceSets.main.output

	// Required for mixin annotation processor
	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

	/**
	 * Ensure we are using the mixin version loader is built against to test the AP.
	 * Otherwise Loom will default to an older version (due to no mod loader on the mod* configs)
	 */
	annotationProcessor ("net.fabricmc:sponge-mixin:${project.mixin_version}") {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}

	testImplementation project(":junit")
}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

import net.fabricmc.loom.util.OperatingSystem
import groovy.json.JsonSlurper

configurations {
	productionRuntime {
		extendsFrom configurations.minecraftLibraries
		extendsFrom configurations.loaderLibraries
		extendsFrom configurations.minecraftRuntimeOnlyLibraries
	}
	productionRuntimeMods
}

dependencies {
	productionRuntime "net.fabricmc:intermediary:${minecraft_version}"

	// Include the external libraries on the classpath
	def installerJson = new JsonSlurper().parse(rootProject.file("src/main/resources/fabric-installer.json"))
	installerJson.libraries.common.each {
		productionRuntime it.name
	}

	// Use Fabric's auto client test
	productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:0.69.1+1.19.3"
	productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:0.69.1+1.19.3:testmod"
}

def loaderJarTask = project(":").tasks.proguardJar

// This is very far beyond loom's API if you copy this, you're on your own.
task runProductionAutoTestClient(type: JavaExec, dependsOn: [loaderJarTask]) {
	classpath.from configurations.productionRuntime
	classpath.from loaderJarTask
	mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
	workingDir = file("run")

	afterEvaluate {
		dependsOn downloadAssets
	}

	doFirst {
		classpath.from loom.minecraftProvider.minecraftClientJar
		workingDir.mkdirs()

		args(
			"--assetIndex", loom.minecraftProvider.versionInfo.assetIndex().fabricId(loom.minecraftProvider.minecraftVersion()),
			"--assetsDir", new File(loom.files.userCache, "assets").absolutePath,
			"--gameDir", workingDir.absolutePath
		)

		if (OperatingSystem.CURRENT_OS == OperatingSystem.MAC_OS) {
			jvmArgs(
				"-XstartOnFirstThread"
			)
		}

		def mods = configurations.productionRuntimeMods.files.join(File.pathSeparator)

		jvmArgs(
			"-Dfabric.addMods=${mods}",
			"-Dfabric.autoTest"
		)
	}
}